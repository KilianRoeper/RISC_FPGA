library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity custom_ram is
    Port (
        clk : in STD_LOGIC;
        rst : in STD_LOGIC;
        enable : in STD_LOGIC;
        write_enable : in STD_LOGIC;
        addr : in STD_LOGIC_VECTOR(15 downto 0);
        data_in : in STD_LOGIC_VECTOR(15 downto 0);
        data_out : out STD_LOGIC_VECTOR(15 downto 0)
    );
end custom_ram;

architecture Behavioral of custom_ram is
    type memory_array is array (0 to 255) of STD_LOGIC_VECTOR(15 downto 0); -- 128 Adressen für reduzierte RAM-Größe
    signal mem : memory_array := (
        "0000000000000001", --Instruktion
        "0000000000000010",
        "0000000000000100", 
        "0000000000000110",
        "0000000000001000", 
        "0000000000001010", 
        "0000000000001100", 
        "0000000000001110",
        "0000000000010000", 
        "0000000000010010", 
        "0000000000010100", 
        "0000000000010110", 
        others => "0000000000000000"  -- restliche Speicherplätze mit NOP
    );
begin
    process(clk)
    begin
        if rising_edge(clk) then
            if rst = '1' then
                mem <= (others => "0000000000000000");
            elsif enable = '1' then --Ram ist aktiv wenn 1
                if write_enable = '1' then --Ram liest wenn 0 und schreibt wenn 1
                    mem(to_integer(unsigned(addr))) <= data_in;
                else
                    data_out <= mem(to_integer(unsigned(addr)));
                end if;
            end if;
        end if;
    end process;
end Behavioral;
