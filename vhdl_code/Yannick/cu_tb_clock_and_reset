----------------------------------------------------------------------------------
-- Created by Yannick Ott
----------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use work.RISC_constants.all;

entity cu_tb is
end cu_tb;

architecture Behavioral of cu_tb is  

    -- Deklaration der ControlUnit-Komponente
    component ControlUnit
    Port ( 
        cpu_clock : in STD_LOGIC;
        reset     : in STD_LOGIC
      );
    end component;

    -- Pipeline-Zustände und Signal zur Nachverfolgung
    type state is (state_fetch, state_decode, state_reg_read, state_alu_en, state_ram_en, state_reg_write);
    signal sig : state := state_fetch;

    -- Testbench-Signale
    signal cpu_reset               : STD_LOGIC := '0';
    signal cpu_clock               : STD_LOGIC := '0';
    
    -- Kontrollsignale
    signal sig_fetch               : std_logic := '0';
    signal sig_decode              : std_logic := '0';
    signal sig_reg_read            : std_logic := '0';
    signal sig_alu_en              : std_logic := '0';
    signal sig_ram_en              : std_logic := '0';
    signal sig_reg_write           : std_logic := '0';
    
    -- Verschiedene Kontroll- und Datensignale
    signal sig_pc_op_out           : std_logic_vector(1 downto 0) := (others => '0');
    signal sig_regA_load_enable    : std_logic := '0';
    signal sig_ram_store_enable    : std_logic := '0';
    
    -- Zähler für Durchläufe der State Machine
    signal cycle_counter           : integer := 0;

begin

    -- Instanz der Control Unit
    uut: ControlUnit
    Port map (
        cpu_clock => cpu_clock,
        reset     => cpu_reset
    );

    -- Prozess zur Erzeugung des Taktsignals
    clk_process : process
    begin 
        cpu_clock <= '0';
        wait for 5 ns;  -- Halbe Taktperiode
        cpu_clock <= '1';
        wait for 5 ns;
    end process; 

    -- Prozess zur Steuerung des Reset-Signals und Überwachung des Zustands
    stim_proc: process
    begin        
        cpu_reset <= '1';
        wait for 50 ns; 
        cpu_reset <= '0'; 

        wait until (sig = state_fetch and cycle_counter = 2);
        cpu_reset <= '1'; 
        wait for 50 ns;   
        cpu_reset <= '0'; 

        wait;
    end process;

    -- Hauptprozess zur Pipeline-Steuerung
    process(cpu_clock)
    begin
        if rising_edge(cpu_clock) then 
            if cpu_reset = '1' then
                sig <= state_fetch; 
                cycle_counter <= 0;
            else
                case sig is
                    when state_fetch =>
                        sig_reg_write <= '0';
                        sig_fetch <= '1';
                        sig <= state_decode;

                    when state_decode =>
                        sig_fetch <= '0';
                        sig_decode <= '1';
                        sig <= state_reg_read;

                    when state_reg_read =>
                        sig_decode <= '0';
                        sig_reg_read <= '1';
                        sig <= state_alu_en;

                    when state_alu_en =>
                        sig_reg_read <= '0';
                        sig_alu_en <= '1';
                        sig <= state_ram_en;

                    when state_ram_en =>
                        sig_alu_en <= '0';
                        sig_ram_en <= '1';
                        sig <= state_reg_write;

                    when state_reg_write =>
                        sig_ram_en <= '0';
                        sig_reg_write <= '1';
                        sig <= state_fetch; 
                        cycle_counter <= cycle_counter + 1;

                    when others =>
                        sig <= state_fetch;
                end case;
            end if;
        end if;
    end process;

end Behavioral;
