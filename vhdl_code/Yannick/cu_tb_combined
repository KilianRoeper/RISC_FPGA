----------------------------------------------------------------------------------
-- Created by Yannick Ott
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity cu_tb is
end cu_tb;

architecture Behavioral of cu_tb is  

    -- Komponenten- und Port-Deklarationen
    component ControlUnit
    Port ( 
        cpu_clock : in STD_LOGIC;
        reset     : in STD_LOGIC
      );
    end component;

    -- Pipeline-Zust채nde und Zustandssignal
    type state is (state_fetch, state_decode, state_reg_read, state_alu_en, state_ram_en, state_reg_write);
    signal sig : state := state_fetch;

    -- Testbench-Signale
    signal cpu_reset               : STD_LOGIC := '0';
    signal cpu_clock               : STD_LOGIC := '0';
    
    -- Kontrollsignale
    signal sig_fetch               : std_logic := '0';
    signal sig_decode              : std_logic := '0';
    signal sig_reg_read            : std_logic := '0';
    signal sig_alu_en              : std_logic := '0';
    signal sig_ram_en              : std_logic := '0';
    signal sig_reg_write           : std_logic := '0';
    
    -- Kombiniertes Signal und andere Steuersignale
    signal reg_file_enable_combined : std_logic := '0';
    signal sig_ram_store_enable     : std_logic := '0';

begin

    -- Instanziere die Control Unit
    uut: ControlUnit
    Port map (
        cpu_clock => cpu_clock,
        reset     => cpu_reset
    );

    -- Taktprozess
    clk_process : process
    begin 
        cpu_clock <= '0';
        wait for 5 ns;  -- Halbe Taktperiode
        cpu_clock <= '1';
        wait for 5 ns;
    end process; 

    -- Resetprozess
    stim_proc: process
    begin        
        cpu_reset <= '1'; -- Aktivieren des Reset-Signals
        wait for 50 ns;
        cpu_reset <= '0'; -- Deaktivieren des Reset-Signals
        wait;
    end process;

    -- Zustands체berg채nge (Pipeline-Steuerung)
    process(cpu_clock)
    begin
        if rising_edge(cpu_clock) then 
            if cpu_reset = '1' then
                sig <= state_fetch; -- Zustand nach Reset
            else
                case sig is
                    when state_fetch =>
                        sig_fetch <= '1';
                        sig_ram_store_enable <= '0';
                        reg_file_enable_combined <= '0';
                        sig <= state_decode;
                    when state_decode =>
                        sig_fetch <= '0';
                        sig_decode <= '1';
                        sig <= state_reg_read;
                    when state_reg_read =>
                        sig_decode <= '0';
                        sig_reg_read <= '1';
                        reg_file_enable_combined <= '1'; -- Lesen aktiv
                        sig <= state_alu_en;
                    when state_alu_en =>
                        sig_reg_read <= '0';
                        sig_alu_en <= '1';
                        sig <= state_ram_en;
                    when state_ram_en =>
                        sig_alu_en <= '0';
                        sig_ram_en <= '1';
                        sig_ram_store_enable <= '1'; -- RAM-Store aktiv
                        sig <= state_reg_write;
                    when state_reg_write =>
                        sig_ram_en <= '0';
                        sig_ram_store_enable <= '0';
                        sig_reg_write <= '1';
                        reg_file_enable_combined <= '1'; -- Schreiben aktiv
                        sig <= state_fetch; -- Neustart
                    when others =>
                        sig <= state_fetch;
                end case;
            end if;
        end if;
    end process;

stimulus_process : process
begin
    -- Warte auf den Start nach Reset
    wait for 60 ns;

    -- Test 1: `reg_file_enable_combined`
    sig_reg_read <= '1'; sig_reg_write <= '0';
    wait for 10 ns;

    sig_reg_read <= '0'; sig_reg_write <= '1';
    wait for 10 ns;

    sig_reg_read <= '0'; sig_reg_write <= '0';
    wait for 10 ns;

    -- Test 2: `sig_ram_store_enable`
    wait for 10 ns; -- Zustandswechsel nach RAM_EN
    -- Hier kannst du beobachten, wie sig_ram_store_enable gesetzt wird
    
    wait for 10 ns; -- Zustandswechsel zur체ck zu FETCH
    -- Beobachte sig_ram_store_enable auch hier

    -- Abschluss der Simulation
    wait;
end process;

end Behavioral;
