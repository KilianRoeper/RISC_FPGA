----------------------------------------------------------------------------------
-- Created by Yannick Ott
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use work.RISC_constants.all;

-- Testbench for the Control Unit
entity cu_tb is
end cu_tb; 

architecture Behavioral of cu_tb is  

    -- Definition of pipeline states and a signal to track the current state
    type state is (state_fetch, state_decode, state_reg_read, state_alu_en, state_ram_en, state_reg_write);
    signal sig : state := state_fetch;

    -- Testbench signals
    signal cpu_reset               : STD_LOGIC := '0';
    signal cpu_clock               : STD_LOGIC := '0';
    
    -- Control signals for pipeline states
    signal sig_fetch               : std_logic := '0';
    signal sig_decode              : std_logic := '0';
    signal sig_reg_read            : std_logic := '0';
    signal sig_alu_en              : std_logic := '0';
    signal sig_ram_en              : std_logic := '0';
    signal sig_reg_write           : std_logic := '0';

    signal reg_file_enable_combined : std_logic := '0'; 
    signal ram_enable_combined      : std_logic := '0';
    signal sig_ram_store_enable     : std_logic := '0';
    signal alu_op_out               : std_logic_vector(3 downto 0):= OPCODE_SW;
    
begin

    -- Process for generating the clock signal
    clk_process : process
    begin 
        cpu_clock <= '0';
        wait for 5 ns;  -- Halbe Taktperiode
        cpu_clock <= '1';
        wait for 5 ns;
    end process; 

    -- Process for controlling the reset signal
    stim_proc: process
    begin        
        cpu_reset <= '1'; -- setze Reset auf aktiv
        wait for 50 ns;   -- Warte auf 5 Takte
        cpu_reset <= '0'; -- Deaktiviere Reset
        wait;
    end process;

    -- Main process to simulate state transitions in the pipeline
    process(cpu_clock)
    begin
        if rising_edge(cpu_clock) then 
            if cpu_reset = '1' then
                sig <= state_fetch; -- Reset state to FETCH when reset is active
            else
                -- State transitions in the pipeline based on the current state
                case sig is
                    when state_fetch =>
                        sig_reg_write <= '0';
                        sig_fetch <= '1';
                        sig <= state_decode;
                    when state_decode =>
                        sig_fetch <= '0';
                        sig_decode <= '1';
                        sig <= state_reg_read;
                    when state_reg_read =>
                        sig_decode <= '0';
                        sig_reg_read <= '1';
                        sig <= state_alu_en;
                    when state_alu_en =>
                        sig_reg_read <= '0';
                        sig_alu_en <= '1';
                        sig <= state_ram_en;
                    when state_ram_en =>
                        sig_alu_en <= '0';
                        sig_ram_en <= '1';
                        sig <= state_reg_write;
                    when state_reg_write =>
                        sig_ram_en <= '0';
                        sig_reg_write <= '1';
                        sig <= state_fetch;  -- Restart the cycle
                    when others =>
                        sig <= state_fetch;
                end case;
            end if;
        end if;
    end process;

    -- Logic to control register file and RAM based on the current state
    process(sig)
    begin
        -- Combined enable signal for register file operations
        reg_file_enable_combined <= sig_reg_read or sig_reg_write;
        
        -- Enable RAM store signal in the corresponding state
        if sig = state_ram_en then
            sig_ram_store_enable <= '1';
        else
            sig_ram_store_enable <= '0';
        end if;
        
        -- Combined enable signal for register file operations
        ram_enable_combined <= sig_fetch or sig_ram_en;
        
        
        -- Enable RAM store signal in the corresponding state
        if alu_op_out = OPCODE_SW then
            sig_ram_store_enable <= '1';
        else
            sig_ram_store_enable <= '0'; 
        end if;        
    end process;
    
    wait_process : process
    begin 
        alu_op_out <= OPCODE_ADD;
        wait for 100 ns; 
        alu_op_out <= OPCODE_SW;
        wait;
    end process; 

end Behavioral;
