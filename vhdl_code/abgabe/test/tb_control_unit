----------------------------------------------------------------------------------
-- Yannick Ott
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
library work;
use work.risc_constants.ALL;


entity control_unit_tb is
end control_unit_tb;


architecture Behavioral of control_unit_tb is


-- Testbench-specific signals
    -- Clock and reset signals
    signal cpu_clock                : STD_LOGIC := '0';     -- Main clock signal
    signal cpu_reset                : STD_LOGIC := '0';     -- Reset signal for the control unit
    constant clk_period             : time := 10 ns;        -- Clock period (10ns for 100MHz)
    

-- Control Unit output signals
    signal fetch_enable             : STD_LOGIC := '0';                             -- Enables the fetch stage
    signal decode_enable            : STD_LOGIC := '0';                             -- Enables the decode stage
    signal regread_enable           : STD_LOGIC := '0';                             -- Enables reading from the register file
    signal alu_enable               : STD_LOGIC := '0';                             -- Enables ALU operations
    signal ram_enable               : STD_LOGIC := '0';                             -- Enables RAM access
    signal regwrite_enable          : STD_LOGIC := '0';                             -- Enables writing to the register file
    signal ram_enable_combined      : STD_LOGIC := '0';                             -- Combined enable signal for RAM
    signal reg_file_enable_combined : STD_LOGIC := '0';                             -- Combined enable signal for the register file
    signal pc_op                    : STD_LOGIC_VECTOR(1 downto 0) := "00";         -- Program counter operation signal
    signal ram_store_enable         : STD_LOGIC := '0';                             -- Enables storing data in RAM
    signal regA_load_enable         : STD_LOGIC := '0';                             -- Enables loading data into register A
    signal regA_data                : STD_LOGIC_VECTOR(15 downto 0) := X"0000";     -- Data for register A
    signal ram_address              : STD_LOGIC_VECTOR(7 downto 0) := X"00";        -- RAM address signal
    signal start_tx                 : STD_LOGIC := '0';                             -- Starts UART transmission
    signal buffer_write_enable      : std_logic := '0';                             -- Enables writing to the buffer
    signal buffer_read_enable       : std_logic := '0';                             -- Enables reading from the buffer
    signal buffer_data_from_cu      : STD_LOGIC_VECTOR(7 downto 0) := X"00";        -- Data output to the buffer
    
-- control unit input signals 
    signal alu_op                   : STD_LOGIC_VECTOR(3 downto 0) := X"0";         -- ALU operation code
    signal regB_data                : STD_LOGIC_VECTOR(7 downto 0) := X"00";        -- Data from register B
    signal ram_data                 : STD_LOGIC_VECTOR(15 downto 0) := X"0000";     -- Data from RAM
    signal pc_out                   : STD_LOGIC_VECTOR(7 downto 0) := X"00";        -- Program counter output
    signal alu_result               : STD_LOGIC_VECTOR(15 downto 0) := X"0000";     -- Result from the ALU
    signal tx_ready                 : std_logic := '0';                             -- Indicates UART is ready for transmission
    signal buffer_read_valid        : std_logic := '0';                             -- Indicates valid data is available in the buffer
    signal buffer_full              : std_logic := '0';                             -- Indicates the buffer is full
    signal buffer_empty             : std_logic := '1';                             -- Indicates the buffer is empty


begin


-- Instantiate the Control Unit
-- Description: Connects the control unit to the testbench signals for testing
control_unit_inst : entity work.control_unit
    PORT MAP (
        clk_in                          => cpu_clock,                   -- Clock input
        reset_in                        => cpu_reset,                   -- Reset input
        alu_op_in                       => alu_op,                      -- ALU operation code input      
        regB_data_in                    => regB_data,                   -- Data input from Register B       
        ram_data_in                     => ram_data,                    -- Data input from RAM        
        pc_in                           => pc_out,                      -- Program counter input           
        alu_result_in                   => alu_result,                  -- ALU result input            
        tx_ready_in                     => tx_ready,                    -- UART ready signal input
        buffer_read_valid_in            => buffer_read_valid,           -- Valid data available in buffer    
        buffer_full_in                  => buffer_full,                 -- Buffer full status
        buffer_empty_in                 => buffer_empty,                -- Buffer empty status
        
        fetch_enable_out                => fetch_enable,                -- Fetch enable signal     
        decode_enable_out               => decode_enable,               -- Fetch enable signal
        regread_enable_out              => regread_enable,              -- Register read enable signal
        alu_enable_out                  => alu_enable,                  -- ALU enable signal 
        ram_enable_out                  => ram_enable,                  -- RAM enable signal
        regwrite_enable_out             => regwrite_enable,             -- Register write enable signal
        ram_enable_combined_out         => ram_enable_combined,         -- Combined RAM enable signal     
        reg_file_enable_combined_out    => reg_file_enable_combined,    -- Combined register file enable signal
        pc_op_out                       => pc_op,                       -- Program counter operation signal 
        ram_store_enable_out            => ram_store_enable,            -- RAM store enable signal
        regA_load_enable_out            => regA_load_enable,            -- Register A load enable signal
        regA_data_out                   => regA_data,                   -- Data output for Register A
        ram_address_out                 => ram_address,                 -- RAM address output
        start_tx_out                    => start_tx,                    -- UART transmission start signal
        buffer_read_enable_out          => buffer_read_enable,          -- Buffer read enable signal
        buffer_write_enable_out         => buffer_write_enable,         -- Buffer write enable signal
        buffer_data_out                 => buffer_data_from_cu          -- Data output from Control Unit to buffer
    );
    
    
-- Test process
-- Description: Simulates various scenarios to verify Control Unit functionality
    test_proc: process
    begin
        -- Test 1: Check if all enable signals are toggled within a cycle
        wait for clk_period * 5;
        assert(regwrite_enable = '1') report " cycle didn't enable last stage" severity error;
        
        -- Test 2: Check if the Control Unit resets properly
        cpu_reset <= '1';           -- Set reset high to initialize the Control Unit
        wait for clk_period;
        assert(fetch_enable = '1') report " should have gotten to stage fetch again" severity error;        -- Fetch stage should be enabled
        assert(pc_op = PC_OP_RESET) report " should have reset the pc" severity error;                      -- Program counter should be reset
        
        -- Test 3: Enhance clock to transition to the RAM enable stage
        cpu_reset <= '0';           -- Clear reset signal to continue testing  
        wait for clk_period * 3;
        
        -- Test 4: Check if the RAM address is set by the contents of Register B during OPCODE_SW and if the RAM store enable signal is set
        alu_op <= OPCODE_SW;        -- Set ALU operation code to store word
        regB_data <= X"0A";         -- Set data for Register B to 0x0A
        wait for clk_period;
        assert(ram_address = X"0A") report " ram address should be set according to regB_data" severity error;              -- Verify RAM address
        assert(ram_store_enable = '1') report " ram store_enable should have been set during OPCODE_SW" severity error;     -- Verify RAM store enable
        
        -- Test 5: Check if the RAM address is set by the program counter (PC) on the next clock edge
        pc_out <= X"03";            -- Set program counter to 0x03
        wait for clk_period;
        assert(ram_address = X"03") report " ram address should be set according to pc" severity error;         -- Verify RAM address is set by PC
        
        -- Test 6: Ensure regA_load_enable is not set during OPCODE_SW on the next clock edge
        assert(regA_load_enable = '0') report " regA_load_enable should not be set" severity error;     -- regA_load_enable should not be set during store word operation
        
        -- Test 7: Continue to the next clock edge to test additional operations
        wait for clk_period * 4;
        
        -- Test 8: Verify if data to be written to Register A is correctly set during OPCODE_LW (Load Word)
        alu_op <= OPCODE_LW;        -- Set ALU operation code to load word
        ram_data <= X"0064";        -- Set RAM data to 0x64
        wait for clk_period;
        assert(regA_data = X"0064") report " regA data is not set by ram_data" severity error;      -- Verify regA data is correctly set by RAM data
        
        -- Test 9: Verify if regA_data is set by the ALU result if it's not set by RAM data
        alu_result <= X"EF12";          -- Set ALU result to 0xEF12
        wait for clk_period;
        assert(regA_data = X"EF12") report " regA data is not set by alu result" severity error;        -- Verify regA data is correctly set by ALU result
        
        wait;
    end process;
    

    -- Clock generation process
    clk_process : process
    begin 
        cpu_clock <= '0';           -- Set clock to low
        wait for clk_period / 2;    -- Wait for half the clock period
        cpu_clock <= '1';           -- Set clock to high
        wait for clk_period / 2;    -- Wait for the other half of the clock period
    end process; 


end Behavioral;
